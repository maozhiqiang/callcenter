#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class PasteFile:
  """
  Attributes:
   - id
   - filename
   - filehash
   - filemd5
   - uploadtime
   - mimetype
   - size
   - url_s
   - url_i
   - image_size
   - url_d
   - url_p
   - size_humanize
   - type
   - quoteurl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'filename', None, None, ), # 2
    (3, TType.STRING, 'filehash', None, None, ), # 3
    (4, TType.STRING, 'filemd5', None, None, ), # 4
    (5, TType.STRING, 'uploadtime', None, None, ), # 5
    (6, TType.STRING, 'mimetype', None, None, ), # 6
    (7, TType.I64, 'size', None, None, ), # 7
    (8, TType.STRING, 'url_s', None, None, ), # 8
    (9, TType.STRING, 'url_i', None, None, ), # 9
    (10, TType.LIST, 'image_size', (TType.I32,None), None, ), # 10
    (11, TType.STRING, 'url_d', None, None, ), # 11
    (12, TType.STRING, 'url_p', None, None, ), # 12
    (13, TType.STRING, 'size_humanize', None, None, ), # 13
    (14, TType.STRING, 'type', None, None, ), # 14
    (15, TType.STRING, 'quoteurl', None, None, ), # 15
  )

  def __init__(self, id=None, filename=None, filehash=None, filemd5=None, uploadtime=None, mimetype=None, size=None, url_s=None, url_i=None, image_size=None, url_d=None, url_p=None, size_humanize=None, type=None, quoteurl=None,):
    self.id = id
    self.filename = filename
    self.filehash = filehash
    self.filemd5 = filemd5
    self.uploadtime = uploadtime
    self.mimetype = mimetype
    self.size = size
    self.url_s = url_s
    self.url_i = url_i
    self.image_size = image_size
    self.url_d = url_d
    self.url_p = url_p
    self.size_humanize = size_humanize
    self.type = type
    self.quoteurl = quoteurl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.filename = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.filehash = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.filemd5 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.uploadtime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.mimetype = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.size = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.url_s = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.url_i = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.image_size = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32()
            self.image_size.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.url_d = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.url_p = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.size_humanize = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.quoteurl = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PasteFile')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.filename is not None:
      oprot.writeFieldBegin('filename', TType.STRING, 2)
      oprot.writeString(self.filename)
      oprot.writeFieldEnd()
    if self.filehash is not None:
      oprot.writeFieldBegin('filehash', TType.STRING, 3)
      oprot.writeString(self.filehash)
      oprot.writeFieldEnd()
    if self.filemd5 is not None:
      oprot.writeFieldBegin('filemd5', TType.STRING, 4)
      oprot.writeString(self.filemd5)
      oprot.writeFieldEnd()
    if self.uploadtime is not None:
      oprot.writeFieldBegin('uploadtime', TType.STRING, 5)
      oprot.writeString(self.uploadtime)
      oprot.writeFieldEnd()
    if self.mimetype is not None:
      oprot.writeFieldBegin('mimetype', TType.STRING, 6)
      oprot.writeString(self.mimetype)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I64, 7)
      oprot.writeI64(self.size)
      oprot.writeFieldEnd()
    if self.url_s is not None:
      oprot.writeFieldBegin('url_s', TType.STRING, 8)
      oprot.writeString(self.url_s)
      oprot.writeFieldEnd()
    if self.url_i is not None:
      oprot.writeFieldBegin('url_i', TType.STRING, 9)
      oprot.writeString(self.url_i)
      oprot.writeFieldEnd()
    if self.image_size is not None:
      oprot.writeFieldBegin('image_size', TType.LIST, 10)
      oprot.writeListBegin(TType.I32, len(self.image_size))
      for iter6 in self.image_size:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.url_d is not None:
      oprot.writeFieldBegin('url_d', TType.STRING, 11)
      oprot.writeString(self.url_d)
      oprot.writeFieldEnd()
    if self.url_p is not None:
      oprot.writeFieldBegin('url_p', TType.STRING, 12)
      oprot.writeString(self.url_p)
      oprot.writeFieldEnd()
    if self.size_humanize is not None:
      oprot.writeFieldBegin('size_humanize', TType.STRING, 13)
      oprot.writeString(self.size_humanize)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 14)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.quoteurl is not None:
      oprot.writeFieldBegin('quoteurl', TType.STRING, 15)
      oprot.writeString(self.quoteurl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.filename is None:
      raise TProtocol.TProtocolException(message='Required field filename is unset!')
    if self.filehash is None:
      raise TProtocol.TProtocolException(message='Required field filehash is unset!')
    if self.filemd5 is None:
      raise TProtocol.TProtocolException(message='Required field filemd5 is unset!')
    if self.uploadtime is None:
      raise TProtocol.TProtocolException(message='Required field uploadtime is unset!')
    if self.mimetype is None:
      raise TProtocol.TProtocolException(message='Required field mimetype is unset!')
    if self.size is None:
      raise TProtocol.TProtocolException(message='Required field size is unset!')
    if self.url_s is None:
      raise TProtocol.TProtocolException(message='Required field url_s is unset!')
    if self.url_i is None:
      raise TProtocol.TProtocolException(message='Required field url_i is unset!')
    if self.image_size is None:
      raise TProtocol.TProtocolException(message='Required field image_size is unset!')
    if self.url_d is None:
      raise TProtocol.TProtocolException(message='Required field url_d is unset!')
    if self.url_p is None:
      raise TProtocol.TProtocolException(message='Required field url_p is unset!')
    if self.size_humanize is None:
      raise TProtocol.TProtocolException(message='Required field size_humanize is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.quoteurl is None:
      raise TProtocol.TProtocolException(message='Required field quoteurl is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.filename)
    value = (value * 31) ^ hash(self.filehash)
    value = (value * 31) ^ hash(self.filemd5)
    value = (value * 31) ^ hash(self.uploadtime)
    value = (value * 31) ^ hash(self.mimetype)
    value = (value * 31) ^ hash(self.size)
    value = (value * 31) ^ hash(self.url_s)
    value = (value * 31) ^ hash(self.url_i)
    value = (value * 31) ^ hash(self.image_size)
    value = (value * 31) ^ hash(self.url_d)
    value = (value * 31) ^ hash(self.url_p)
    value = (value * 31) ^ hash(self.size_humanize)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.quoteurl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreatePasteFileRequest:
  """
  Attributes:
   - filehash
   - filename
   - mimetype
   - width
   - height
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'filehash', None, None, ), # 1
    (2, TType.STRING, 'filename', None, None, ), # 2
    (3, TType.STRING, 'mimetype', None, None, ), # 3
    (4, TType.I32, 'width', None, None, ), # 4
    (5, TType.I32, 'height', None, None, ), # 5
  )

  def __init__(self, filehash=None, filename=None, mimetype=None, width=None, height=None,):
    self.filehash = filehash
    self.filename = filename
    self.mimetype = mimetype
    self.width = width
    self.height = height

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.filehash = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.filename = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mimetype = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.width = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.height = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreatePasteFileRequest')
    if self.filehash is not None:
      oprot.writeFieldBegin('filehash', TType.STRING, 1)
      oprot.writeString(self.filehash)
      oprot.writeFieldEnd()
    if self.filename is not None:
      oprot.writeFieldBegin('filename', TType.STRING, 2)
      oprot.writeString(self.filename)
      oprot.writeFieldEnd()
    if self.mimetype is not None:
      oprot.writeFieldBegin('mimetype', TType.STRING, 3)
      oprot.writeString(self.mimetype)
      oprot.writeFieldEnd()
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I32, 4)
      oprot.writeI32(self.width)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I32, 5)
      oprot.writeI32(self.height)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.filehash is None:
      raise TProtocol.TProtocolException(message='Required field filehash is unset!')
    if self.filename is None:
      raise TProtocol.TProtocolException(message='Required field filename is unset!')
    if self.mimetype is None:
      raise TProtocol.TProtocolException(message='Required field mimetype is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.filehash)
    value = (value * 31) ^ hash(self.filename)
    value = (value * 31) ^ hash(self.mimetype)
    value = (value * 31) ^ hash(self.width)
    value = (value * 31) ^ hash(self.height)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ImageNotSupported(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ImageNotSupported')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UploadImageError(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UploadImageError')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotFound(TException):
  """
  Attributes:
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'code', None, None, ), # 1
  )

  def __init__(self, code=None,):
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.code = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotFound')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 1)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceUnavailable(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceUnavailable')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
